desc: Step Input Sequencer (GianniMIDI)
in_pin:none
out_pin:none

import my-lib.jsfx-inc

slider1:CLOCK_NOTE=4<0,127,1>clock note
slider2:clockChannel=16<1,16,1>clock channel
slider3:controlChannel=16<1,16,1>control channel


@init

ext_noinit = 1;

LEARN_ = 1;
NEXT_ = 0;
PREV_ = 2;
TIE_ = 3;

learn = 0;
prev = 0;
next = 0;
tie = 0;
cursor = -1;

sequence.arrayInit(256);
sequence.default(-1);

function reset()
(
  offset = msg.offset;
  off = sequence[cursor];
  off.parseBits();
  off.statusHi = 8;
  off.sendWithOffset(offset);
  sequence.default(-1);
  prev = 0;
  next = 0;
  cursor = -1;
);

function isAdvance()
(
  this.isNoteOn() &&  (this.note() == CLOCK_NOTE) && (this.channel() == CLOCK_CHANNEL);
);

function advance()
(
  offset = msg.offset;
  off = sequence[cursor];
  off !== -1 &&
  (
    off.parseBits();
    off.statusHi = 8;
    off.sendWithOffset(offset);
  );
  cursor += 1;
  cursor >= sequence.length && cursor = 0;
  msg = sequence[cursor];
  msg !== -1 &&
  (  
    msg.parseBits();
    msg.sendWithOffset(offset);
  );
  handled = 1;
);

function handleState()
(
  msg.channel() == CONTROL_CHANNEL && (
    msg.isNoteOn() && (
      msg.note() == LEARN_ && learn = 1;
      msg.note() == NEXT_ && next = 1;
      msg.note() == PREV_ && prev = 1;
      msg.note() == TIE_ && tie = 1;
      learn && next && (
        sequence.push(-1);
        next = 0;
      );
      handled = 1;
    );
    msg.isNoteOff() && (
      msg.note() == LEARN_ && learn = 0;
      msg.note() == NEXT_ && next = 0;
      msg.note() == PREV_ && prev = 0;
      msg.note() == TIE_ && tie = 0;
      handled = 1;
    );
  );
  !learn && (
    next && prev && reset();
    msg.isAdvance() && advance();
  );
);


@slider

CLOCK_CHANNEL = clockChannel - 1;
CONTROL_CHANNEL = controlChannel - 1;


@block

// sampleOffset = -1;

while(msg.recv()) 
(
  handled = 0;
  handleState();
  !handled &&
  (
    learn && msg.isNoteOn() && sequence.push(msg.toBits());
    msg.send();
  );
);


// @sample

// sampleOffset += 1;
