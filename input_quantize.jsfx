desc: gianniMIDI live input quantize

in_pin:none
out_pin:none

slider1:16<1,16,1>quantize interval (bar/n)
slider2:0<0,2,1{no (good for one-shots),unquantised (short notes may never play),smart quantized (min duration of 1 interval}>send note offs 

import gianni-lib.jsfx-inc

@init

queuedNoteOns = 0;
qnons.len = 0;
period = 0;
sCount = 0;

function enq() local (bits)
(
  bits.writeBits(0, 4, this.statusLo);
  bits.writeBits(4, 4, this.statusHi);
  bits.writeBits(8, 7, this.data1);
  bits.writeBits(15, 7, this.data2);
  queuedNoteOns[qnons.len] = bits;
  qnons.len += 1;
);

function deq(index) local (bits)
(
  bits = queuedNoteOns[index];
  midisend(
    0,
    bits.readBits(0, 8),
    bits.readBits(8, 7),
    bits.readBits(15, 7)
  );
  queuedNoteOns[index] = 0;
);

function release()
(
  
  while(qnons.len)
  (
    qnons.len -= 1;
    deq(qnons.len);
    
  );
);

@slider

period = samplesPerBar() / slider1;

@block

!period && period = samplesPerBar() / slider1;

@sample

while (msg.recv())
(
  handled = 0;
  msg.isNoteOn() &&
  (
    handled = 1;
    msg.enq();
  );
  msg.isNoteOff() &&
  (
    handled = 1;
    slider2 == 1 && msg.send()
  ) ;
  !handled && mesg.send();
);
sCount += 1;
sCount == period && sCount = 0;
!sCount && release();
