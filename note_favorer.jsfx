desc: gianniMIDI note favorer
in_pin:none
out_pin:none

slider1:HPN=58<0,127,1>high priority note
slider2:LPN=53<0,127,1>low priority note

@init

function isHPN()
(
  (msg1>>4 == 9) &&  // message is a note on
  (msg2 == HPN);
);

function isLPN()
(
  (msg1>>4 == 9) &&  // message is a note on
  (msg2 == LPN)
);

lastLPN = -1;


@block

sampleCount = -1; // we'll increment sampleCount in @sample for parity with offset


@sample

sampleCount += 1;

previousOffset = sampleCount > 0 ? sampleCount - 1 : samplesblock - 1;

lastLPN == previousOffset && lastHPN != previousOffset &&  // we have an unaccounted-for LPN from the previous sample, send it (one sample late, best we can do)
(
  midisend(offset, 9<<4 + lastLPNChannel, LPN, lastLPNVelocity) ;
  lastLPN = -1;               
);

while(midirecv(offset, msg1, msg2, msg3))
(

  handled = 0;

  isHPN() &&
  (hpc += 1;
    lastHPN = offset;                    // make a note that we processed a HPN at this offset
    midisend(offset, msg1, msg2, msg3);  // send message
    handled = 1;
  );

  isLPN() &&
  (
    lastHPN !== offset && (         // we haven't process a HPN with the same offset, but we may get one yet
      lastLPN = offset;             // record the offset
      lastLPNVelocity = msg3;       // record the velocity
      lastLPNChannel = msg1 & $~4;  // record the channel
    );
    handled = 1;
  );

  !handled && midisend(offset, msg1, msg2, msg3); // these are not the note-ons we're looking for. move along.
                                                  // this will occasionally pass through spurious LPN-offs
                                                  // but that shouldn't be a problem, he said
);
