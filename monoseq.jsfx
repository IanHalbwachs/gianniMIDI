desc: Monophonic Step Sequencer (GianniMIDI)
in_pin:none
out_pin:none

slider1:_controlChan=16<0,127,1>sequencer controls channel
slider2:clockNote=0<0,127,1>clock note
slider3:learnNote=7<0,127,1>learn note
slider4:stepNote=6<0,127,1>step note

import my-lib.jsfx-inc


@init

ext_noinit = 1;

function isControl()
(
  this.statusLo == controlChan;
);

function isLearnOn()
(
  this.data1 == learnNote && this.statusHi == 9;
);

function isLearnOff()
(
  this.data1 == learnNote && this.statusHi == 8;
);

function isStepOn()
(
  this.data1 == stepNote && this.statusHi == 9;
);

function isStepOff()
(
  this.data1 == stepNote && this.statusHi == 8;
);

function isClockOn()
(
  this.data1 == clockNote && this.statusHi == 9;
);

function isClockOff()
(
  this.data1 == clockNote && this.statusHi == 8;
);

function remove(_msg*)
(
  i = -1;
  j = 0;
  while(i == -1 && j < this.length) (
    m = this[j];
    m.parseBits();
    m.statusLo == _msg.statusLo && m.data1 == _msg.data1 && i = j;
    j += 1;
  );

  i != -1 &&
  (
    this.length -= 1;  
    while(i < this.length)
    (
      this[i] = this[i + 1];
      i+= 1;
    );
  );
);

seq.arrayInit(128);
seq.default(-1);
index = 0;

heldNotes.arrayInit(128);
holding = -1;
HOLD_BIT = 1 << 22 ;

lastNotePlayed = -1;

noteOff.statusHi = 8;

controlChan = _controlChan - 1;


@slider

controlChan = _controlChan - 1;


@block

while(msg.recv())
(
  handled = 0;
  msg.sanitizeNoteOffs();
  msg.isControl() ?
  (
    handled = 1;

    msg.isLearnOn() &&
    (
      noteOff.sendWithOffset(msg.offset);
      seq.default(-1);
      index = 0;
      lastNotePlayed = -1;
      learning = 1;
    );

    msg.isLearnOff() &&
    (
      learning = 0;
    );

    learning ? (
      msg.isStepOn() &&
      (
        holding == -1 ? (
          seq.push(lastNotePlayed);
        ) : (
          seq.push(holding + HOLD_BIT);
        );
        lastNotePlayed = -1;
      );
    ) : (
      msg.isClockOn() &&
      (incc += 1;
        seq.length &&
        (
          noteOn = seq[index];
          noteOn.parseBits();
          hold = noteOn.readBits(22, 1);

          hold ? (
            noteOn.sendWithOffset(msg.offset);
            noteOff.sendWithOffset(msg.offset);
          ) : (
            noteOff.sendWithOffset(msg.offset);
            noteOn.sendWithOffset(msg.offset);
          );

          // set up next note off
          noteOff.statusLo = noteOn.statusLo;
          noteOff.data1 = noteOn.data1;

          index += 1;
          index == seq.length && index = 0;
        );
      );
    );
    //end control
  ) : ( 
    learning &&
    (
      msg.isNoteOn() &&
      (
        holding = msg.toBits();
        heldNotes.push(holding);
        lastNotePlayed = holding;
      );
      msg.isNoteOff() &&
      (
        heldNotes.remove(msg);
        holding = heldNotes.length ? heldNotes[heldNotes.length - 1] : -1;
        holding.parseBits();
      );
    );
    //end !control + learning
  );
  // end !control
  !handled && msg.send();
);
